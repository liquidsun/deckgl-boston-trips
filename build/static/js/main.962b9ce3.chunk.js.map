{"version":3,"sources":["deckgl-overlay.tsx","loader.tsx","utils.tsx","default-app-config.ts","app.tsx","serviceWorker.ts","index.tsx"],"names":["DeckGLOverlay","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","animationFrame","state","currentTime","animate","bind","assertThisInitialized","getColor","window","cancelAnimationFrame","loopLength","timestamp","Date","now","timestampOffset","loopTime","loopTimeMilliseconds","setState","requestAnimationFrame","d","color","tagColor","start_id","highlightedOutgoingTrips","length","find","hn","toLowerCase","highlightColor","end_id","highlightedIncomingTrips","incomingHighlightColor","_this$props","handleOnHover","initialViewState","nodes","trips","trailLength","viewport","layers","push","TripsLayer","id","data","getPath","segments","map","p","coordinates","getTimestamps","opacity","widthMinPixels","GeoJsonLayer","filled","getFillColor","stroked","extruded","pointRadiusScale","getRadius","properties","count","pickable","autoHighlight","onHover","onClick","info","console","log","object","name","react","deckgl","viewState","React","Loader","className","getUrlParam","URL","location","href","searchParams","get","getNumber","numStr","numNum","Number","isNaN","updateKeyInString","keysString","sParam","sValue","sURLVariables","split","parameterUpdated","i","join","utils","getKnownUrlParameters","result","dataSampleIdx","dataIdx","highlightOutgoingTrips","highlightIncomingTrips","updateUrlParameters","params","newStateStr","decodeURIComponent","search","substring","String","queryFilters","history","pushState","DEFAULT_APP_CONFIG","colors","dataSamples","title","tripsUrl","geoJsonUrl","nodeListUrl","initialPartialViewport","longitude","latitude","zoom","initialLoopTimeMinutes","initialTrailLength","initialViewport","maxZoom","pitch","bearing","width","height","mapboxStyle","process","REACT_APP_MAPBOX_STYLE","mapboxToken","REACT_APP_MAPBOX_TOKEN","nodeNameLabel","nodeIdLabel","nodeCount","nodeLabelOutgoing","nodeLabelIncoming","App","intervalId","knownUrlParams","Utils","initialDataSampleIdx","appConfig","friendlyName","friendlyTime","hideInfoBox","loopTimeMinutes","nodeList","percentThroughLoop","popupInfo","startDate","timeMultiplier","assign","handleDataChange","handleHighlightOutgoingTripsChange","handleHighlightIncomingTripsChange","handleHighlightNodeReload","handleLoopTimeMinutesChange","handleOnHoverGeoPoint","handleTimeChange","handleTrailLengthChange","loadNodeList","loadTrips","updateBoxInfo","_this2","addEventListener","resize","loadGeoJsonNodes","setInterval","clearInterval","dataUrlIdx","_this3","url","requestJson","error","response","parse","startTimestamp","_this4","sort","_this5","getAnimationTime","timeThroughLoop","Math","floor","timeSinceStart","calculatedFriendlyTime","toFriendlyTime","realTimeSinceStart","currentDate","getTime","minutes","getMinutes","getDate","getMonth","getFullYear","getHours","event","newTimeThroughLoop","target","value","newTimestampOffset","trailLengthStr","parseFloat","loopTimeMinutesStr","newLoopTime","highlightedNodesCommaSep","n","highlightedTripsRemoved","highlightedNodesRemoved","dataSampleOption","handleViewportChange","innerWidth","innerHeight","_this6","_this$state","dataSampleOptions","idx","label","nodeListOptions","highlightedOutgoingTripsVl","highlightedIncomingTripsVl","loader","loader_Loader","popupEle","esm","geometry","closeButton","closeOnClick","anchor","stopid","selectDataEle","react_select_browser_esm","options","onChange","mapStyle","dragRotate","onViewportChange","mapboxApiAccessToken","deckgl_overlay_DeckGLOverlay","handleInfoBoxVisibility","type","min","max","defaultValue","onInput","closeMenuOnSelect","isMulti","onMenuClose","maxMenuHeight","Boolean","hostname","match","ReactDOM","render","react_default","a","createElement","app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wXAIqBA,cAInB,SAAAA,EAAYC,GAAY,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACtBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAHRQ,oBAEwB,EAGtBP,EAAKQ,MAAQ,CACXC,YAAa,GAGfT,EAAKO,eAAiB,KAEtBP,EAAKU,QAAUV,EAAKU,QAAQC,KAAbV,OAAAW,EAAA,EAAAX,CAAAD,IACfA,EAAKa,SAAWb,EAAKa,SAASF,KAAdV,OAAAW,EAAA,EAAAX,CAAAD,IAVMA,mFActBG,KAAKO,yDAIsB,MAAvBP,KAAKI,gBACPO,OAAOC,qBAAqBZ,KAAKI,kDAKnC,GAA6B,MAAzBJ,KAAKJ,MAAMiB,WAAoB,CACjC,IAAMC,EAAYC,KAAKC,MAAQhB,KAAKJ,MAAMqB,gBACpCC,EAAWlB,KAAKJ,MAAMuB,qBAC5BnB,KAAKoB,SAAS,CACZd,YAAcQ,EAAYI,GAAalB,KAAKJ,MAAMiB,WAAaK,KAGnElB,KAAKI,eAAiBO,OAAOU,sBAAsBrB,KAAKO,QAAQC,KAAKR,wCAG9DsB,GACP,IAAIC,EAAQvB,KAAKJ,MAAM2B,MACjBC,EAAWF,EAAEC,MAejB,GAdc,MAAZC,IACFD,EAAQC,GAaU,MAAdF,EAAEG,UACEzB,KAAKJ,MAAM8B,yBAAyBC,OAAS,EAAG,CAE+D,MADpG3B,KACFJ,MAAM8B,yBAAyBE,KAAK,SAACC,GAAD,OAAgBP,EAAEG,SAASK,gBAAkBD,EAAGC,kBACzFP,EAAQvB,KAAKJ,MAAMmC,gBAK/B,GAAgB,MAAZT,EAAEU,QACEhC,KAAKJ,MAAMqC,yBAAyBN,OAAS,EAAG,CAE6D,MADlG3B,KACFJ,MAAMqC,yBAAyBL,KAAK,SAACC,GAAD,OAAgBP,EAAEU,OAAOF,gBAAkBD,EAAGC,kBACvFP,EAAQvB,KAAKJ,MAAMsC,wBAKjC,OAAOX,mCAGA,IAAAY,EACwEnC,KAAKJ,MAA7EwC,EADAD,EACAC,cAAeC,EADfF,EACeE,iBAAkBC,EADjCH,EACiCG,MAAOC,EADxCJ,EACwCI,MAAOC,EAD/CL,EAC+CK,YAAaC,EAD5DN,EAC4DM,SAC5DnC,EAAeN,KAAKK,MAApBC,YAEHoC,EAAS,GAkCb,OAhCa,MAATH,GACFG,EAAOC,KAAK,IAAIC,IAAW,CACzBC,GAAI,QACJC,KAAMP,EACNQ,QAAS,SAACzB,GAAD,OAAaA,EAAE0B,SAASC,IAAI,SAACC,GAAD,OAAiBA,EAAEC,eACxDC,cAAe,SAAC9B,GAAD,OAAaA,EAAE0B,SAASC,IAAI,SAACC,GAAD,OAAiBA,EAAEpC,aAC9DJ,SAAUV,KAAKU,SACf2C,QAAS,GACTC,eAAgB,EAChBd,cACAlC,iBAIS,MAATgC,GACFI,EAAOC,KAAK,IAAIY,IAAa,CAC3BV,GAAI,gBACJC,KAAMR,EACNkB,QAAQ,EACRC,aAAc,iBAAM,CAAC,EAAG,IAAK,IAAK,MAClCC,SAAS,EACTC,UAAU,EACVC,iBAAkB,GAClBC,UAAW,SAACvC,GAAD,OAAWA,EAAEwC,WAAWC,OACnCC,UAAU,EACVC,eAAe,EACflC,eAAgB,CAAC,EAAG,IAAK,IAAK,KAC9BmC,QAAS9B,EACT+B,QAAS,SAACC,GAAD,OAAeC,QAAQC,IAAIF,EAAKG,OAAOT,WAAWU,UAIzC,IAAlB9B,EAAOf,OACF,KAIP8C,EAAA,cAACC,EAAA,EAAD,CACErC,iBAAkBA,EAClBsC,UAAWlC,EACXC,OAAQA,WA1H2BkC,aCDtBC,2LAGjB,OAAOJ,EAAA,qBAAKK,UAAU,qBAAoBL,EAAA,qBAAKK,UAAU,WACrDL,EAAA,qBAAKK,UAAU,wCACfL,EAAA,qBAAKK,UAAU,wCACfL,EAAA,qBAAKK,UAAU,2CACfL,EAAA,qBAAKK,UAAU,2CACfL,EAAA,qBAAKK,UAAU,QAAf,oBAR4BF,cCDpC,SAASG,EAAYP,GAGnB,OAFU,IAAIQ,IAAIrE,OAAOsE,SAASC,MAClBC,aAAaC,IAAIZ,GAInC,SAASa,EAAUC,GACjB,GAAc,MAAVA,EAAgB,CAClB,IAAIC,EAASC,OAAOF,GACpB,IAAKE,OAAOC,MAAMF,GAChB,OAAOA,EAGX,OAAO,KAST,SAASG,EAAkBC,EAAoBC,EAAgBC,GAI7D,IAHA,IAAIC,EAAgBH,EAAWhE,OAAS,EAAIgE,EAAWI,MAAM,KAAO,GAEhEC,GAAmB,EACdC,EAAI,EAAGA,EAAIH,EAAcnE,OAAQsE,IAAK,CACtBH,EAAcG,GAAGF,MAAM,KAEzB,KAAOH,IACtBE,EAAcG,GAAKL,EAAO,KAAKC,GAAQ,IACvCG,GAAmB,GAO3B,OAJyB,IAArBA,GACAF,EAAcnD,KAAKiD,EAAO,KAAKC,GAAQ,KAGpCC,EAAcI,KAAK,KAGb,IAAAC,EAAA,CACbC,sBADa,WAEX,IAAIC,EAA6B,CAC/BC,cAAe,KACfpF,SAAU,KACVsB,YAAa,KACbd,yBAA0B,KAC1BO,yBAA0B,MAIxBsE,EAAUlB,EAAUN,EApCL,YAqCJ,MAAXwB,GAAmBA,GAAW,IAChCF,EAAOC,cAAgBC,GAIzB,IAAIrF,EAAWmE,EAAUN,EAzCN,aA0CH,MAAZ7D,GAAoBA,EAAW,GAAKA,EAAW,SACjDmF,EAAOnF,SAAWA,GAIpB,IAAIsB,EAAc6C,EAAUN,EA9CN,gBA+CH,MAAfvC,GAAuBA,EAAc,GAAKA,EAAc,SAC1D6D,EAAO7D,YAAcA,GAIvB,IAAIgE,EAAyBzB,EAnDK,0BAoDJ,MAA1ByB,GAAkCA,EAAuB7E,OAAS,IACpE0E,EAAO3E,yBAA2B8E,EAAuBT,MAAM,MAIjE,IAAIU,EAAyB1B,EAxDK,0BA4DlC,OAH8B,MAA1B0B,GAAkCA,EAAuB9E,OAAS,IACpE0E,EAAOpE,yBAA2BwE,EAAuBV,MAAM,MAE1DM,GAGTK,oBA1Ca,SA0COC,GAClB,IAAIC,EAAcC,mBAAmBlG,OAAOsE,SAAS6B,OAAOC,UAAU,IAC1C,MAAxBJ,EAAOL,gBACTM,EAAclB,EAAkBkB,EAtEf,UAsE4CI,OAAOL,EAAOL,iBAEtD,MAAnBK,EAAOzF,WACT0F,EAAclB,EAAkBkB,EAxEf,WAwE4CI,OAAOL,EAAOzF,YAEnD,MAAtByF,EAAOnE,cACToE,EAAclB,EAAkBkB,EA1EZ,cA0E4CI,OAAOL,EAAOnE,eAEzC,MAAnCmE,EAAOjF,2BACTkF,EAAclB,EAAkBkB,EA5EA,yBA4E4CD,EAAOjF,yBAAyBwE,KAAK,OAGnH,IAAIe,EAAe,IAAML,EACzBjG,OAAOuG,QAAQC,UAAU,GAAI,GAAIF,cCnGxBG,wBAAgC,CACzC7F,MAAO,CAAC,EAAG,GAAI,KACf8F,OAAQ,CACJ,CAAC,EAAG,IAAK,KACT,CAAC,IAAK,IAAK,IACX,CAAC,IAAK,IAAK,KACX,CAAC,EAAG,IAAK,MAEbC,YAAa,CACT,CACIC,MAAO,YACPC,SAAU,4BACVC,WAAY,oCACZC,YAAa,iCACbC,uBAAwB,CACpBC,WAAY,UACZC,SAAU,UACVC,KAAM,KAGd,CACIP,MAAO,SACPC,SAAU,4BACVC,WAAY,oCACZC,YAAa,iCACbC,uBAAwB,CACpBC,WAAY,UACZC,SAAU,UACVC,KAAM,MAIlB/F,eAAgB,CAAC,IAAK,GAAI,IAC1BG,uBAAuB,CAAC,IAAK,IAAK,GAClC6F,uBAAwB,EACxBC,mBAAoB,IACpBC,gBAAiB,CACbL,WAAY,UACZC,SAAU,UACVC,KAAM,GACNI,QAAS,GACTC,MAAO,GACPC,QAAS,EACTC,MAAO,IACPC,OAAQ,KAEZC,YAAaC,+CAAYC,uBACzBC,YAAaF,+CAAYG,uBACzBC,cAAe,aACfC,YAAY,WACZC,UAAU,oBACVC,kBAAmB,2BACnBC,kBAAmB,2BACnBzB,MAAO,UCxCU0B,cAMnB,SAAAA,EAAYrJ,GAAY,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiJ,IACtBpJ,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmJ,GAAA9I,KAAAH,KAAMJ,KALRsJ,gBAIwB,EAAArJ,EAHxBsJ,oBAGwB,EAAAtJ,EAFxBoB,qBAEwB,EAGtBpB,EAAKsJ,eAAiBC,EAAMhD,wBAE5B,IAAIiD,EAAuBxJ,EAAKsJ,eAAe7C,eAAiB,EAL1C,OAOtBzG,EAAKQ,MAAQ,CACXiJ,UAAWlC,EACXd,cAAe+C,EACfE,aAAc,GACdC,aAAc,GACdC,aAAa,EACb/H,yBAA0E,MAAhD7B,EAAKsJ,eAAezH,yBAAmC7B,EAAKsJ,eAAezH,yBAA2B,GAChIO,yBAA0E,MAAhDpC,EAAKsJ,eAAelH,yBAAmCpC,EAAKsJ,eAAelH,yBAA2B,GAChIpB,WAAY,IACZ6I,gBAAiB7J,EAAKsJ,eAAejI,UAAYkG,EAAmBW,uBACpE4B,SAAU,GACVrH,MAAO,KACPsH,mBAAoB,EACpBC,UAAW,KACXC,UAAW,IAAI/I,KAAK,IAAM,EAAG,EAAG,EAAG,EAAG,GACtCgJ,eAAgB,EAChBvH,YAAa3C,EAAKsJ,eAAe3G,aAAe4E,EAAmBY,mBACnEzF,MAAO,KACPE,SAAU3C,OAAOkK,OAAO,GAAI5C,EAAmBa,gBAAiBb,EAAmBE,YAAY+B,GAAsB1B,yBAGvH9H,EAAKoB,gBAAkBF,KAAKC,MAE5BnB,EAAKoK,iBAAmBpK,EAAKoK,iBAAiBzJ,KAAtBV,OAAAW,EAAA,EAAAX,CAAAD,IACxBA,EAAKqK,mCAAqCrK,EAAKqK,mCAAmC1J,KAAxCV,OAAAW,EAAA,EAAAX,CAAAD,IAC1CA,EAAKsK,mCAAqCtK,EAAKsK,mCAAmC3J,KAAxCV,OAAAW,EAAA,EAAAX,CAAAD,IAC1CA,EAAKuK,0BAA4BvK,EAAKuK,0BAA0B5J,KAA/BV,OAAAW,EAAA,EAAAX,CAAAD,IACjCA,EAAKwK,4BAA8BxK,EAAKwK,4BAA4B7J,KAAjCV,OAAAW,EAAA,EAAAX,CAAAD,IACnCA,EAAKyK,sBAAwBzK,EAAKyK,sBAAsB9J,KAA3BV,OAAAW,EAAA,EAAAX,CAAAD,IAC7BA,EAAK0K,iBAAmB1K,EAAK0K,iBAAiB/J,KAAtBV,OAAAW,EAAA,EAAAX,CAAAD,IACxBA,EAAK2K,wBAA0B3K,EAAK2K,wBAAwBhK,KAA7BV,OAAAW,EAAA,EAAAX,CAAAD,IAC/BA,EAAK4K,aAAe5K,EAAK4K,aAAajK,KAAlBV,OAAAW,EAAA,EAAAX,CAAAD,IACpBA,EAAK6K,UAAY7K,EAAK6K,UAAUlK,KAAfV,OAAAW,EAAA,EAAAX,CAAAD,IACjBA,EAAK8K,cAAgB9K,EAAK8K,cAAcnK,KAAnBV,OAAAW,EAAA,EAAAX,CAAAD,IAxCCA,mFA2CJ,IAAA+K,EAAA5K,KAClBW,OAAOkK,iBAAiB,SAAU7K,KAAK8K,OAAOtK,KAAKR,OACnDA,KAAK8K,SACL9K,KAAK0K,UAAU1K,KAAKK,MAAMiG,eAC1BtG,KAAKyK,aAAazK,KAAKK,MAAMiG,eAC7BtG,KAAK+K,iBAAiB/K,KAAKK,MAAMiG,eACjCtG,KAAKkJ,WAAa8B,YAAY,kBAAMJ,EAAKD,iBAAiB,oDAI1DM,cAAcjL,KAAKkJ,8CAGXgC,GAAoB,IAAAC,EAAAnL,KACxBoL,EAAMpL,KAAKK,MAAMiJ,UAAUhC,YAAY4D,GAAY1D,SACvD6D,YAAYD,EAAK,SAACE,EAAYC,GAC5B,GAAa,MAATD,EAAe,CACjB,IAAI/B,EAAe4B,EAAK9K,MAAMiJ,UAAU/B,MACX,MAAzBgE,EAAShC,eACXA,EAAegC,EAAShC,cAE1B,IAAIO,EAAY,IAAI/I,KAAKA,KAAKyK,MAAMD,EAASE,iBACzC1B,EAAiBwB,EAASxB,eAC1BxH,EAAQgJ,EAAShJ,MACjB1B,EAAa0K,EAAS1K,WAG1B,GAAI0B,EAAMZ,OAAS,GAAKY,EAAMZ,QAAU,GACtC,IAAK,IAAIsE,EAAI,EAAGA,EAAI1D,EAAMZ,OAAQsE,IAChC1D,EAAM0D,GAAG1E,MAAQ4J,EAAK9K,MAAMiJ,UAAUjC,OAAOpB,EAAIkF,EAAK9K,MAAMiJ,UAAUjC,OAAO1F,QAIjFwJ,EAAKlK,gBAAkBF,KAAKC,MAC5BmK,EAAK/J,SAAS,CACZmI,aAAcA,EACdO,UAAWA,EACXvH,MAAOA,EACP1B,WAAYA,EACZkJ,eAAgBA,4CAMXmB,GAAoB,IAAAQ,EAAA1L,KAC/BqL,YAAYrL,KAAKK,MAAMiJ,UAAUhC,YAAY4D,GAAYxD,YAAa,SAAC4D,EAAYC,GACpE,MAATD,IACFC,EAASI,OACTD,EAAKtK,SAAS,CACZuI,SAAU4B,gDAMDL,GAAoB,IAAAU,EAAA5L,KACnCqL,YAAYrL,KAAKK,MAAMiJ,UAAUhC,YAAY4D,GAAYzD,WAAY,SAAC6D,EAAYC,GACnE,MAATD,GACFM,EAAKxK,SAAS,CACZkB,MAAOiJ,iDAQb,OAAOvL,KAAKK,MAAMQ,YAAyC,GAA7Bb,KAAKK,MAAMqJ,iBAAuB,4CAQhE,GAA4B,MAAxB1J,KAAKK,MAAMyJ,UAAmB,CAChC,IAAMhJ,EAAYC,KAAKC,MAAQhB,KAAKiB,gBAC9BC,EAAWlB,KAAK6L,mBAClBC,EAAmBhL,EAAYI,EAC/B0I,EAAqBmC,KAAKC,MAAOF,EAAkB5K,EAAY,KAI/D+K,EADc,EAAcjM,KAAKK,MAAM0J,eACVgC,KAAKC,MAAMF,GAAmB9L,KAAKK,MAAMQ,WAAaK,IACnFgL,EAAyBlM,KAAKmM,eAAeF,GAEjDjM,KAAKoB,SAAS,CACZoI,aAAc0C,EACdtC,mBAAoBA,4CAKXqC,GACX,IAAIG,EAAqBH,EAAiBjM,KAAKK,MAAM0J,eACjDsC,EAAc,IAAItL,KAAKf,KAAKK,MAAMyJ,UAAUwC,UAAiC,IAArBF,GACxDG,EAAUvF,OAAOqF,EAAYG,cAIjC,OAHID,EAAQ5K,OAAS,IACnB4K,EAAU,IAAMA,GAEXF,EAAYI,UAAY,KAAOJ,EAAYK,WAAa,GAAK,IAAML,EAAYM,cAAgB,IAAMN,EAAYO,WAAa,IAAML,2CAG9HM,GACf,IAAM/L,EAAYC,KAAKC,MAAQhB,KAAKiB,gBAC9BC,EAAWlB,KAAK6L,mBAClBC,EAAmBhL,EAAYI,EAE/B4L,EADwBD,EAAME,OAAOC,MACS,IAAO9L,EACrD+L,EAAqBjN,KAAKiB,iBAAmB6K,EAAkBgB,GACnE9M,KAAKiB,gBAAkBgM,kDAGDJ,GACtB,IAAIK,EAAiBL,EAAME,OAAOC,MAClC,GAAsB,MAAlBE,GAA0BA,EAAevL,OAAS,EAAG,CACvD,IAAIa,EAAc2K,WAAWD,GACzB1K,GAAe,EACjBA,EAAc,KACLA,EAAc,UACvBA,EAAc,SAEhBxC,KAAKoB,SAAS,CAACoB,YAAaA,IAC5BxC,KAAKmJ,eAAe3G,YAAcA,EAClC4G,EAAM1C,oBAAoB1G,KAAKmJ,qBAE/BnJ,KAAKoB,SAAS,CAACoB,YAAaxC,KAAKK,MAAMiJ,UAAUtB,qBACjDhI,KAAKmJ,eAAe3G,YAAc,KAClC4G,EAAM1C,oBAAoB1G,KAAKmJ,oEAIP0D,GAC1B,IAAIO,EAAqBP,EAAME,OAAOC,MACtC,GAA0B,MAAtBI,GAA8BA,EAAmBzL,OAAS,EAAG,CAC/D,IAAI+H,EAAkByD,WAAWC,GAC7B1D,GAAmB,EACrBA,EAAkB,KACTA,EAAkB,UAC3BA,EAAkB,SAEpB,IAAM5I,EAAYC,KAAKC,MAAQhB,KAAKiB,gBAC9BC,EAAWlB,KAAK6L,mBAElBwB,EAAcrN,KAAKK,MAAMQ,YAA8B,GAAlB6I,GAAwB,IAG7DuD,EAAqBjN,KAAKiB,iBACxBH,EAAYuM,EAAgBA,GAAgBvM,EAAYI,EAAYA,IAC1ElB,KAAKiB,gBAAkBgM,EAEvBjN,KAAKoB,SAAS,CACZsI,gBAAiBA,IAEnB1J,KAAKmJ,eAAejI,SAAWwI,EAC/BN,EAAM1C,oBAAoB1G,KAAKmJ,qBAI/BnJ,KAAKoB,SAAS,CAACsI,gBAAiB1J,KAAKK,MAAMiJ,UAAUvB,yBACrD/H,KAAKmJ,eAAe3G,YAAc,KAClC4G,EAAM1C,oBAAoB1G,KAAKmJ,2EAIAmE,GACD,MAA5BA,IACFA,EAA2B,IAE7B,IAAIrL,EAAqCqL,EAAyBrK,IAAI,SAACsK,GAAD,OAAYA,EAAEP,QAChFQ,EAA0BxN,KAAKK,MAAM4B,yBAAyBN,OAASM,EAAyBN,OACpG3B,KAAKoB,SAAS,CAACa,yBAA0BA,IACzCjC,KAAKmJ,eAAelH,yBAA2BA,EAC/CmH,EAAM1C,oBAAoB1G,KAAKmJ,gBAC3BqE,GACFxN,KAAKoK,uFAI0BkD,GACD,MAA5BA,IACFA,EAA2B,IAE7B,IAAI5L,EAAqC4L,EAAyBrK,IAAI,SAACsK,GAAD,OAAYA,EAAEP,QAChFS,EAA0BzN,KAAKK,MAAMqB,yBAAyBC,OAASD,EAAyBC,OACpG3B,KAAKoB,SAAS,CAACM,yBAA0BA,IACzC1B,KAAKmJ,eAAezH,yBAA2BA,EAC/C0H,EAAM1C,oBAAoB1G,KAAKmJ,gBAC3BsE,GACFzN,KAAKoK,gFAMPpK,KAAKoB,SAAS,CAACmB,MAAOzC,OAAOkK,OAAO,GAAIhK,KAAKK,MAAMkC,kDAGpCmL,GACf,GAAwB,MAApBA,GAA4B1N,KAAKK,MAAMiG,gBAAkBoH,EAAiBV,MAAO,CACnFhN,KAAKkK,mCAAmC,IACxClK,KAAKmK,mCAAmC,IACxC,IAAI7D,EAAgBoH,EAAiBV,MACrCrM,OAAOuG,QAAQC,UAAU,GAAI,GAAI,IACjCnH,KAAKoB,SAAS,CAACmB,MAAO,KAAM+D,cAAeA,IAC3CtG,KAAK0K,UAAUpE,GACftG,KAAKyK,aAAanE,GAClBtG,KAAK+K,iBAAiBzE,GACtBtG,KAAK2N,qBAAqB3N,KAAKK,MAAMiJ,UAAUhC,YAAYhB,GAAeqB,wBAC1E3H,KAAKmJ,eAAe7C,cAAgBA,EACpC8C,EAAM1C,oBAAoB1G,KAAKmJ,+DAIb/E,GACpBpE,KAAKoB,SAAS,CAACyI,UAAoB,OAATzF,EAAgBA,EAAKG,OAAS,wCAIxDvE,KAAK2N,qBAAqB,CACxBtF,MAAO1H,OAAOiN,WACdtF,OAAQ3H,OAAOkN,2DAIEpL,GACnBzC,KAAKoB,SAAS,CACZqB,SAAU3C,OAAOkK,OAAO,GAAIhK,KAAKK,MAAMoC,SAAUA,qDAI7BgH,GACtBzJ,KAAKoB,SAAS,CACZqI,YAAaA,qCAIR,IAAAqE,EAAA9N,KAAA+N,EACmO/N,KAAKK,MAAxOiJ,EADAyE,EACAzE,UAAWhD,EADXyH,EACWzH,cAA6BkD,GADxCuE,EAC0BxE,aAD1BwE,EACwCvE,cAAcC,EADtDsE,EACsDtE,YAAa/H,EADnEqM,EACmErM,yBAAyBO,EAD5F8L,EAC4F9L,yBAA0BpB,EADtHkN,EACsHlN,WAAY6I,EADlIqE,EACkIrE,gBAAiBC,EADnJoE,EACmJpE,SAAUrH,EAD7JyL,EAC6JzL,MAAOsH,EADpKmE,EACoKnE,mBAAoBC,EADxLkE,EACwLlE,UAAWrH,EADnMuL,EACmMvL,YAAaD,EADhNwL,EACgNxL,MAAOE,EADvNsL,EACuNtL,SAExNuL,EAA2BhO,KAAKK,MAAMiJ,UAAUhC,YAAYrE,IAAI,SAACsK,EAAmBU,GAAkB,MAAO,CAAEjB,MAASiB,EAAKC,MAASX,EAAEhG,SACxI4G,EAAyBxE,EAAS1G,IAAI,SAAAsK,GAAO,MAAO,CAAEP,MAASO,EAAGW,MAASX,KAC3Ea,EAAoC1M,EAAyBuB,IAAI,SAAAsK,GAAO,MAAO,CAAEP,MAASO,EAAGW,MAASX,KACtGc,EAAoCpM,EAAyBgB,IAAI,SAAAsK,GAAO,MAAO,CAAEP,MAASO,EAAGW,MAASX,KAExGe,EAAS7J,EAAA,2BACA,MAATlC,IACF+L,EAAS7J,EAAA,cAAC8J,EAAD,OAGX,IAAIC,EAAW,KACE,MAAb3E,IACF2E,EACE/J,EAAA,cAACgK,EAAA,EAAD,CAAO5L,GAAG,QAAQ+E,UAAWiC,EAAU6E,SAASvL,YAAY,GAAI0E,SAAUgC,EAAU6E,SAASvL,YAAY,GAAIwL,aAAa,EAAOC,cAAc,EAAOC,OAAO,eAC3JpK,EAAA,qBAAKK,UAAU,eAAe9E,KAAKK,MAAMiJ,UAAUV,cAAnD,IAA2F,MAAxBiB,EAAU/F,WAAqB+F,EAAU/F,WAAWU,KAAO,GAC5HC,EAAA,yBACCzE,KAAKK,MAAMiJ,UAAUT,YAFxB,IAE8D,MAAxBgB,EAAU/F,WAAqB+F,EAAU/F,WAAWgL,OAAS,GACjGrK,EAAA,yBACCzE,KAAKK,MAAMiJ,UAAUR,UAJxB,IAI4D,MAAxBe,EAAU/F,WAAqB+F,EAAU/F,WAAWC,MAAQ,MAKtG,IAAIgL,EAAgB,KAKpB,OAJI/O,KAAKK,MAAMiJ,UAAUhC,YAAY3F,OAAS,IAC5CoN,EAAgBtK,EAAA,yBAAKA,EAAA,uCAAoBA,EAAA,yBAAKA,EAAA,cAACuK,EAAA,EAAD,CAAQC,QAASjB,EAAmBkB,SAAUlP,KAAKiK,iBAAkB+C,MAAOgB,EAAkB1H,QAI5I7B,EAAA,qBAAK5B,GAAG,aACLyL,EACD7J,EAAA,qBAAK5B,GAAG,aACN4B,EAAA,cAACgK,EAAA,EAAD3O,OAAAkK,OAAA,GACMvH,EADN,CAEE0M,SAA8C,MAApCnP,KAAKK,MAAMiJ,UAAUf,YAAsBvI,KAAKK,MAAMiJ,UAAUf,YAAc,wDACxF6G,YAAY,EACZC,iBAAkBrP,KAAK2N,qBAAqBnN,KAAKR,MACjDsP,qBAAyD,MAAnCtP,KAAKK,MAAMiJ,UAAUZ,YAAqB1I,KAAKK,MAAMiJ,UAAUZ,YAAc,mGACnGjE,EAAA,cAAC8K,EAAD,CACEhO,MAAO+H,EAAU/H,MACjBa,cAAepC,KAAKsK,sBACpBvI,eAAgBuH,EAAUvH,eAC1BG,uBAA0BoH,EAAUpH,uBACpCR,yBAA0BA,EAC1BO,yBAA0BA,EAC1BI,iBAAkBiH,EAAUrB,gBAC5BpH,WAAYA,EACZM,qBAAsBnB,KAAK6L,mBAC3BvJ,MAAOA,EACPrB,gBAAiBjB,KAAKiB,gBACtBsB,MAAOA,EACPC,YAAaA,EACbC,SAAUA,IAEX+L,IAGL/J,EAAA,qBAAK5B,GAAG,cACN4B,EAAA,yBACEA,EAAA,qCAEFA,EAAA,yBACEA,EAAA,gCAASA,EAAA,mBAAGS,KAAM,wCAAwC6H,OAAO,UAAxD,wBAEXtI,EAAA,yBACEA,EAAA,uCAAgBA,EAAA,mBAAGS,KAAM,6CAA6C6H,OAAO,UAA7D,4BAElBtI,EAAA,yBACEA,EAAA,8EAGJA,EAAA,qBAAK5B,GAAG,sBACN4B,EAAA,qBAAK5B,GAAG,aAAY4B,EAAA,oDACpBA,EAAA,qBAAK5B,GAAG,UAAUiC,UAAW2E,EAAc,OAAS,IAClDhF,EAAA,wBAAQ5B,GAAG,iBAAiBiC,UAAU,8BAA8BX,QAAS,kBAAM2J,EAAK0B,yBAAwB,KAAhH,KACCT,EACDtK,EAAA,wBAAK+E,GACL/E,EAAA,yBACEA,EAAA,iDACAA,EAAA,uBAAOK,UAAU,aAAa2K,KAAK,QAAQC,IAAI,IAAIC,IAAI,MAAM3C,MAAOhG,OAAO4C,GAAqBsF,SAAUlP,KAAKuK,oBAEjH9F,EAAA,yBACEA,EAAA,mDACAA,EAAA,qBAAKK,UAAU,SACbL,EAAA,uBAAOK,UAAU,GAAG2K,KAAK,SAASG,aAAc5I,OAAO0C,GAAkBmG,QAAS7P,KAAKqK,8BAA+B5F,EAAA,yCAG1HA,EAAA,yBACEA,EAAA,gDACAA,EAAA,qBAAKK,UAAU,SACbL,EAAA,uBAAOgL,KAAK,SAASG,aAAc5I,OAAOxE,GAAcqN,QAAS7P,KAAKwK,0BAA2B/F,EAAA,kCAGrGA,EAAA,yBACEA,EAAA,qCAAezE,KAAKK,MAAMiJ,UAAUP,mBACpCtE,EAAA,yBACEA,EAAA,cAACuK,EAAA,EAAD,CACEc,mBAAmB,EACnBC,SAAO,EACPd,QAASd,EACTe,SAAUlP,KAAKkK,mCACf8F,YAAahQ,KAAKoK,0BAElB4C,MAAOoB,EACP6B,cAAe,QAIrBxL,EAAA,yBACEA,EAAA,qCAAezE,KAAKK,MAAMiJ,UAAUN,mBACpCvE,EAAA,yBACEA,EAAA,cAACuK,EAAA,EAAD,CACIc,mBAAmB,EACnBC,SAAO,EACPd,QAASd,EACTe,SAAUlP,KAAKmK,mCACf6F,YAAahQ,KAAKoK,0BAElB4C,MAAOqB,EACP4B,cAAe,SAKzBxL,EAAA,wBAAQ5B,GAAG,iBAAiBiC,UAAW,oBAAsB2E,EAAc,GAAK,QAAStF,QAAS,kBAAM2J,EAAK0B,yBAAwB,KAArI,0BA9ZuB5K,aCHbsL,QACW,cAA7BvP,OAAOsE,SAASkL,UAEe,UAA7BxP,OAAOsE,SAASkL,UAEhBxP,OAAOsE,SAASkL,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAC,EAAAC,cAACC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.962b9ce3.chunk.js","sourcesContent":["import * as React from 'react';\nimport DeckGL, {GeoJsonLayer, TripsLayer} from 'deck.gl';\nimport {DeckglOverlayProps, Trip, DeckflOverlayState, Waypoint} from './data-interfaces';\n\nexport default class DeckGLOverlay extends React.Component<DeckglOverlayProps, DeckflOverlayState> {\n\n  animationFrame: number | null;\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      currentTime: 0\n    };\n\n    this.animationFrame = null;\n\n    this.animate = this.animate.bind(this);\n    this.getColor = this.getColor.bind(this);\n  }\n\n  componentDidMount() {\n    this.animate();\n  }\n\n  componentWillUnmount() {\n    if (this.animationFrame != null) {\n      window.cancelAnimationFrame(this.animationFrame);\n    }\n  }\n\n  animate() {\n    if (this.props.loopLength != null) {\n      const timestamp = Date.now() - this.props.timestampOffset;\n      const loopTime = this.props.loopTimeMilliseconds; // the loop time in milliseconds that deck gl displays\n      this.setState({\n        currentTime: (timestamp % loopTime) * (this.props.loopLength / loopTime)\n      });\n    }\n    this.animationFrame = window.requestAnimationFrame(this.animate.bind(this));\n  }\n  \n  getColor(d: Trip) {\n    let color = this.props.color;\n    const tagColor = d.color;\n    if (tagColor != null) {\n      color = tagColor;\n    }\n\n    // if (d.nodes != null) {\n    //   if (this.props.highlightedNodes.length > 0) {\n    //     let self = this;\n    //     d.nodes.forEach((n: string) => {\n    //       if (self.props.highlightedNodes.find((hn: string) => n.toLowerCase() === hn.toLowerCase()) != null) {\n    //         color = this.props.highlightColor;\n    //       }\n    //     });\n    //   }\n    // }\n      if (d.start_id != null) {\n          if (this.props.highlightedOutgoingTrips.length > 0) {\n              let self = this;\n              if (self.props.highlightedOutgoingTrips.find((hn: string) => d.start_id.toLowerCase() === hn.toLowerCase()) != null) {\n                  color = this.props.highlightColor;\n              }\n          }\n      }\n\n      if (d.end_id != null) {\n          if (this.props.highlightedIncomingTrips.length > 0) {\n              let self = this;\n              if (self.props.highlightedIncomingTrips.find((hn: string) => d.end_id.toLowerCase() === hn.toLowerCase()) != null) {\n                  color = this.props.incomingHighlightColor;\n              }\n          }\n      }\n\n    return color;\n  }\n\n  render() {\n    const {handleOnHover, initialViewState, nodes, trips, trailLength, viewport} = this.props;\n    const {currentTime} = this.state;\n\n    let layers = [];\n    \n    if (trips != null) {\n      layers.push(new TripsLayer({\n        id: 'trips',\n        data: trips,\n        getPath: (d: Trip) => d.segments.map((p: Waypoint) => p.coordinates),\n        getTimestamps: (d: Trip) => d.segments.map((p: Waypoint) => p.timestamp),\n        getColor: this.getColor,\n        opacity: 0.7,\n        widthMinPixels: 2,\n        trailLength,\n        currentTime\n      }));\n    }\n\n    if (nodes != null) {\n      layers.push(new GeoJsonLayer({\n        id: 'geojson-layer',\n        data: nodes,\n        filled: true,\n        getFillColor: () => [0, 255, 178, 150],\n        stroked: true,\n        extruded: false,\n        pointRadiusScale: 0.3,\n        getRadius: (d:any) => d.properties.count,\n        pickable: true,\n        autoHighlight: true,\n        highlightColor: [0, 255, 178, 250],\n        onHover: handleOnHover,\n        onClick: (info: any) => console.log(info.object.properties.name)\n      }));\n    }\n\n    if (layers.length === 0) {\n      return null;\n    }\n\n    return (\n      <DeckGL\n        initialViewState={initialViewState}\n        viewState={viewport}\n        layers={layers}\n      />\n    );\n  }\n}\n","import * as React from 'react';\nimport './loader.css';\n\nexport default class Loader extends React.Component<any, any> {\n\n  render() {\n    return <div className=\"spinner-container\"><div className=\"spinner\">\n        <div className=\"spinner-circle spinner-circle-outer\"></div>\n        <div className=\"spinner-circle spinner-circle-inner\"></div>\n        <div className=\"spinner-circle spinner-circle-single-1\"></div>\n        <div className=\"spinner-circle spinner-circle-single-2\"></div>\n        <div className=\"text\">Loading</div>\n    </div></div>;\n  }\n}\n","import { KnownUrlParameters } from './data-interfaces';\n\nfunction getUrlParam(name: string): string {\n  let url = new URL(window.location.href);\n  let param = url.searchParams.get(name);\n  return param!;\n};\n\nfunction getNumber(numStr: string): number | null {\n  if (numStr != null) {\n    let numNum = Number(numStr);\n    if (!Number.isNaN(numNum)) {\n      return numNum;\n    }\n  }\n  return null;\n}\n\nconst PARAM_DATA_IDX = 'dataIdx';\nconst PARAM_LOOPTIME = 'loopTime';\nconst PARAM_TRAILLENGTH = 'trailLength';\nconst PARAM_HIGHLIGHTSOUTGOINGTRIPS = 'highlightOutgoingTrips';\nconst PARAM_HIGHLIGHTSINCOMINGTRIPS = 'highlightIncomingTrips'\n\nfunction updateKeyInString(keysString: string, sParam: string, sValue: string): string {\n  let sURLVariables = keysString.length > 0 ? keysString.split('&') : [];\n  \n  let parameterUpdated = false;\n  for (let i = 0; i < sURLVariables.length; i++) {\n      let sParameterName = sURLVariables[i].split('=');\n\n      if (sParameterName[0] === sParam) {\n          sURLVariables[i] = sParam+'='+(sValue||'');\n          parameterUpdated = true;\n      }\n  }\n  if (parameterUpdated === false) {\n      sURLVariables.push(sParam+'='+(sValue||''));\n  }\n\n  return sURLVariables.join('&');\n}\n\nexport default {\n  getKnownUrlParameters(): KnownUrlParameters {\n    let result: KnownUrlParameters = {\n      dataSampleIdx: null,\n      loopTime: null,\n      trailLength: null,\n      highlightedOutgoingTrips: null,\n      highlightedIncomingTrips: null\n    };\n\n    // Convert day to dataUrlIdx\n    let dataIdx = getNumber(getUrlParam(PARAM_DATA_IDX));\n    if (dataIdx != null && dataIdx >= 0) {\n      result.dataSampleIdx = dataIdx;\n    }\n\n    // Validate loopTime\n    let loopTime = getNumber(getUrlParam(PARAM_LOOPTIME));\n    if (loopTime != null && loopTime > 0 && loopTime < 999999) {\n      result.loopTime = loopTime;\n    }\n\n    // Validate trailLength\n    let trailLength = getNumber(getUrlParam(PARAM_TRAILLENGTH));\n    if (trailLength != null && trailLength > 0 && trailLength < 999999) {\n      result.trailLength = trailLength;\n    }\n\n    // Validate highlightNode\n    let highlightOutgoingTrips = getUrlParam(PARAM_HIGHLIGHTSOUTGOINGTRIPS);\n    if (highlightOutgoingTrips != null && highlightOutgoingTrips.length > 0) {\n      result.highlightedOutgoingTrips = highlightOutgoingTrips.split(',');\n    }\n\n    // Validate highlightIncoming\n    let highlightIncomingTrips = getUrlParam(PARAM_HIGHLIGHTSINCOMINGTRIPS);\n    if (highlightIncomingTrips != null && highlightIncomingTrips.length > 0) {\n      result.highlightedIncomingTrips = highlightIncomingTrips.split(',');\n    }\n    return result;\n  },\n\n  updateUrlParameters(params: KnownUrlParameters) {\n    let newStateStr = decodeURIComponent(window.location.search.substring(1));\n    if (params.dataSampleIdx != null) {\n      newStateStr = updateKeyInString(newStateStr, PARAM_DATA_IDX, String(params.dataSampleIdx));\n    }\n    if (params.loopTime != null) {\n      newStateStr = updateKeyInString(newStateStr, PARAM_LOOPTIME, String(params.loopTime));\n    }\n    if (params.trailLength != null) {\n      newStateStr = updateKeyInString(newStateStr, PARAM_TRAILLENGTH, String(params.trailLength));\n    }\n    if (params.highlightedOutgoingTrips != null) {\n      newStateStr = updateKeyInString(newStateStr, PARAM_HIGHLIGHTSOUTGOINGTRIPS, params.highlightedOutgoingTrips.join(','));\n    }\n    \n    let queryFilters = \"?\" + newStateStr;\n    window.history.pushState({}, \"\", queryFilters);\n  }\n}","import { AppConfig } from \"./data-interfaces\";\n\nexport const DEFAULT_APP_CONFIG: AppConfig = {\n    color: [0, 89, 255], // blue\n    colors: [\n        [0, 255, 246], // blue\n        [255, 235, 86], // yellow\n        [255, 109, 245], // pink\n        [0, 255, 119] // green\n    ],\n    dataSamples: [\n        { \n            title: \"Wednesday\",\n            tripsUrl: './data' + '/weekday/trips.json',\n            geoJsonUrl: './data' + '/weekday/geojson-stops.json',\n            nodeListUrl: './data' + '/weekday/stops-list.json',\n            initialPartialViewport: {\n                longitude: -71.081949,\n                latitude: 42.349226,\n                zoom: 12\n            }\n        },\n        { \n            title: \"Sunday\",\n            tripsUrl: './data' + '/weekend/trips.json',\n            geoJsonUrl: './data' + '/weekend/geojson-stops.json',\n            nodeListUrl: './data' + '/weekend/stops-list.json',\n            initialPartialViewport: {\n                longitude: -71.081949,\n                latitude: 42.349226,\n                zoom: 12\n            }\n        }\n    ],\n    highlightColor: [214, 21, 21],\n    incomingHighlightColor:[244, 252, 3],\n    initialLoopTimeMinutes: 3,\n    initialTrailLength: 100,\n    initialViewport: {\n        longitude: -71.081949,\n        latitude: 42.349226,\n        zoom: 12,\n        maxZoom: 20,\n        pitch: 45,\n        bearing: 0,\n        width: 500,\n        height: 500\n    },\n    mapboxStyle: process.env.REACT_APP_MAPBOX_STYLE!,\n    mapboxToken: process.env.REACT_APP_MAPBOX_TOKEN!,\n    nodeNameLabel: \"Stop name:\",\n    nodeIdLabel:\"Stop id:\",\n    nodeCount:\"Number of trips: \",\n    nodeLabelOutgoing: 'outgoing trips for stop:',\n    nodeLabelIncoming: 'incoming trips for stop:',\n    title: \"Trips\"\n};","import * as React from 'react';\nimport ReactMapGL, {Popup} from 'react-map-gl';\nimport {json as requestJson} from 'd3-request';\nimport DeckGLOverlay from './deckgl-overlay';\nimport Loader from './loader';\nimport {AppProps, AppState, KnownUrlParameters, TripContainer, DataSampleUrls} from './data-interfaces';\nimport Utils from './utils';\nimport Select from 'react-select';\nimport * as geojson from 'geojson';\nimport './app.css';\nimport './select.css';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport { ValueType } from 'react-select/src/types';\nimport { DEFAULT_APP_CONFIG } from './default-app-config';\n\nexport default class App extends React.Component<AppProps, AppState> {\n\n  intervalId: any;\n  knownUrlParams: KnownUrlParameters;\n  timestampOffset: number;\n\n  constructor(props: any) {\n    super(props);\n\n    this.knownUrlParams = Utils.getKnownUrlParameters();\n\n    let initialDataSampleIdx = this.knownUrlParams.dataSampleIdx || 0;\n\n    this.state = {\n      appConfig: DEFAULT_APP_CONFIG,\n      dataSampleIdx: initialDataSampleIdx,\n      friendlyName: '',\n      friendlyTime: '',\n      hideInfoBox: false,\n      highlightedOutgoingTrips: this.knownUrlParams.highlightedOutgoingTrips != null ? this.knownUrlParams.highlightedOutgoingTrips : [],\n      highlightedIncomingTrips: this.knownUrlParams.highlightedIncomingTrips != null ? this.knownUrlParams.highlightedIncomingTrips : [],\n      loopLength: 1000,\n      loopTimeMinutes: this.knownUrlParams.loopTime || DEFAULT_APP_CONFIG.initialLoopTimeMinutes,\n      nodeList: [],\n      nodes: null,\n      percentThroughLoop: 0,\n      popupInfo: null,\n      startDate: new Date(2000, 1, 1, 0, 0, 0),\n      timeMultiplier: 1,\n      trailLength: this.knownUrlParams.trailLength || DEFAULT_APP_CONFIG.initialTrailLength,\n      trips: null,\n      viewport: Object.assign({}, DEFAULT_APP_CONFIG.initialViewport, DEFAULT_APP_CONFIG.dataSamples[initialDataSampleIdx].initialPartialViewport)\n    };\n\n    this.timestampOffset = Date.now();\n\n    this.handleDataChange = this.handleDataChange.bind(this);\n    this.handleHighlightOutgoingTripsChange = this.handleHighlightOutgoingTripsChange.bind(this);\n    this.handleHighlightIncomingTripsChange = this.handleHighlightIncomingTripsChange.bind(this);\n    this.handleHighlightNodeReload = this.handleHighlightNodeReload.bind(this);\n    this.handleLoopTimeMinutesChange = this.handleLoopTimeMinutesChange.bind(this);\n    this.handleOnHoverGeoPoint = this.handleOnHoverGeoPoint.bind(this);\n    this.handleTimeChange = this.handleTimeChange.bind(this);\n    this.handleTrailLengthChange = this.handleTrailLengthChange.bind(this);\n    this.loadNodeList = this.loadNodeList.bind(this);\n    this.loadTrips = this.loadTrips.bind(this);\n    this.updateBoxInfo = this.updateBoxInfo.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.resize.bind(this));\n    this.resize();\n    this.loadTrips(this.state.dataSampleIdx);\n    this.loadNodeList(this.state.dataSampleIdx);\n    this.loadGeoJsonNodes(this.state.dataSampleIdx);\n    this.intervalId = setInterval(() => this.updateBoxInfo(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n\n  loadTrips(dataUrlIdx: number) {\n    let url = this.state.appConfig.dataSamples[dataUrlIdx].tripsUrl;\n    requestJson(url, (error: any, response: TripContainer) => {\n      if (error == null) {\n        let friendlyName = this.state.appConfig.title;\n        if (response.friendlyName != null) {\n          friendlyName = response.friendlyName;\n        }\n        let startDate = new Date(Date.parse(response.startTimestamp));\n        let timeMultiplier = response.timeMultiplier;\n        let trips = response.trips;\n        let loopLength = response.loopLength;\n\n        // allocate colours if there's a small number of trips\n        if (trips.length > 0 && trips.length <= 10) {\n          for (let i = 0; i < trips.length; i++) {\n            trips[i].color = this.state.appConfig.colors[i % this.state.appConfig.colors.length];\n          }\n        }\n\n        this.timestampOffset = Date.now();\n        this.setState({\n          friendlyName: friendlyName,\n          startDate: startDate,\n          trips: trips,\n          loopLength: loopLength,\n          timeMultiplier: timeMultiplier\n        });\n      }\n    });\n  }\n\n  loadNodeList(dataUrlIdx: number) {\n    requestJson(this.state.appConfig.dataSamples[dataUrlIdx].nodeListUrl, (error: any, response: string[]) => {\n      if (error == null) {\n        response.sort();\n        this.setState({\n          nodeList: response\n        });\n      }\n    });\n  }\n\n  loadGeoJsonNodes(dataUrlIdx: number) {\n    requestJson(this.state.appConfig.dataSamples[dataUrlIdx].geoJsonUrl, (error: any, response: geojson.FeatureCollection<geojson.Point>) => {\n      if (error == null) {\n        this.setState({\n          nodes: response\n        });\n      }\n    });\n  }\n\n  // the loop time in milliseconds that deck gl displays\n  getAnimationTime() {\n    return this.state.loopLength/(this.state.loopTimeMinutes * 60) *1000; // in x * 1000, x is in seconds\n  }\n\n  // getLoopTime() {\n  //   return this.state.loopTimeMinutes * 60 *1000; // in x * 1000, x is in seconds\n  // }\n\n  updateBoxInfo() {\n    if (this.state.startDate != null) {\n      const timestamp = Date.now() - this.timestampOffset;\n      const loopTime = this.getAnimationTime(); // the loop time in milliseconds that deck gl displays\n      let timeThroughLoop = (timestamp % loopTime);\n      let percentThroughLoop = Math.floor((timeThroughLoop / loopTime) * 100);\n\n      // show time\n      const startTime = 0 * 60 * 60 * this.state.timeMultiplier; // hourOfDay * seconds in hour\n      let timeSinceStart = startTime + Math.floor(timeThroughLoop * (this.state.loopLength / loopTime));\n      let calculatedFriendlyTime = this.toFriendlyTime(timeSinceStart);\n\n      this.setState({\n        friendlyTime: calculatedFriendlyTime,\n        percentThroughLoop: percentThroughLoop\n      });\n    }\n  }\n\n  toFriendlyTime(timeSinceStart: number) {\n      let realTimeSinceStart = timeSinceStart / this.state.timeMultiplier;\n      let currentDate = new Date(this.state.startDate.getTime() + realTimeSinceStart * 1000);\n      let minutes = String(currentDate.getMinutes());\n      if (minutes.length < 2) {\n        minutes = '0' + minutes;\n      }\n      return currentDate.getDate() + '/' + (currentDate.getMonth() + 1) + '/' + currentDate.getFullYear() + ' ' + currentDate.getHours() + ':' + minutes;\n  }\n\n  handleTimeChange(event: any) {\n    const timestamp = Date.now() - this.timestampOffset;\n    const loopTime = this.getAnimationTime();\n    let timeThroughLoop = (timestamp % loopTime);\n    let newPercentThroughLoop = event.target.value;\n    let newTimeThroughLoop = (newPercentThroughLoop / 100) * loopTime;\n    let newTimestampOffset = this.timestampOffset + (timeThroughLoop - newTimeThroughLoop);\n    this.timestampOffset = newTimestampOffset;\n  }\n\n  handleTrailLengthChange(event: any) {\n    let trailLengthStr = event.target.value;\n    if (trailLengthStr != null && trailLengthStr.length > 0) {\n      let trailLength = parseFloat(trailLengthStr);\n      if (trailLength <= 0) {\n        trailLength = 0.0001;\n      } else if (trailLength > 9999999) {\n        trailLength = 9999999;\n      }\n      this.setState({trailLength: trailLength});\n      this.knownUrlParams.trailLength = trailLength;\n      Utils.updateUrlParameters(this.knownUrlParams);\n    } else {\n      this.setState({trailLength: this.state.appConfig.initialTrailLength});\n      this.knownUrlParams.trailLength = null;\n      Utils.updateUrlParameters(this.knownUrlParams);\n    }\n  }\n\n  handleLoopTimeMinutesChange(event: any) {\n    let loopTimeMinutesStr = event.target.value;\n    if (loopTimeMinutesStr != null && loopTimeMinutesStr.length > 0) {\n      let loopTimeMinutes = parseFloat(loopTimeMinutesStr);\n      if (loopTimeMinutes <= 0) {\n        loopTimeMinutes = 0.0001;\n      } else if (loopTimeMinutes > 9999999) {\n        loopTimeMinutes = 9999999;\n      }\n      const timestamp = Date.now() - this.timestampOffset;\n      const loopTime = this.getAnimationTime(); // the loop time in milliseconds that deck gl displays\n  \n      let newLoopTime = this.state.loopLength/(loopTimeMinutes * 60) * 1000; // in x * 1000, x is in seconds\n  \n      // Adjust the timestampOffset so that the new loop time kicks off at the same time as currently\n      let newTimestampOffset = this.timestampOffset \n        + ((timestamp % newLoopTime) - (newLoopTime * ((timestamp % loopTime) / loopTime)));\n      this.timestampOffset = newTimestampOffset;\n  \n      this.setState({\n        loopTimeMinutes: loopTimeMinutes\n      });\n      this.knownUrlParams.loopTime = loopTimeMinutes;\n      Utils.updateUrlParameters(this.knownUrlParams);\n\n\n    } else {\n      this.setState({loopTimeMinutes: this.state.appConfig.initialLoopTimeMinutes});\n      this.knownUrlParams.trailLength = null;\n      Utils.updateUrlParameters(this.knownUrlParams);\n    }\n  }\n\n  handleHighlightIncomingTripsChange(highlightedNodesCommaSep: ValueType<any>) {\n    if (highlightedNodesCommaSep == null) {\n      highlightedNodesCommaSep = [];\n    }\n    let highlightedIncomingTrips: string[] = highlightedNodesCommaSep.map((n: any) => n.value);\n    let highlightedTripsRemoved = this.state.highlightedIncomingTrips.length > highlightedIncomingTrips.length;\n    this.setState({highlightedIncomingTrips: highlightedIncomingTrips});\n    this.knownUrlParams.highlightedIncomingTrips = highlightedIncomingTrips;\n    Utils.updateUrlParameters(this.knownUrlParams);\n    if (highlightedTripsRemoved) {\n      this.handleHighlightNodeReload();\n    }\n  }\n\n  handleHighlightOutgoingTripsChange(highlightedNodesCommaSep: ValueType<any>) {\n    if (highlightedNodesCommaSep == null) {\n      highlightedNodesCommaSep = [];\n    }\n    let highlightedOutgoingTrips: string[] = highlightedNodesCommaSep.map((n: any) => n.value);\n    let highlightedNodesRemoved = this.state.highlightedOutgoingTrips.length > highlightedOutgoingTrips.length;\n    this.setState({highlightedOutgoingTrips: highlightedOutgoingTrips});\n    this.knownUrlParams.highlightedOutgoingTrips = highlightedOutgoingTrips;\n    Utils.updateUrlParameters(this.knownUrlParams);\n    if (highlightedNodesRemoved) {\n      this.handleHighlightNodeReload();\n    }\n  }\n\n  handleHighlightNodeReload() {\n    // create a new array for trips so the colours are updated\n    this.setState({trips: Object.assign([], this.state.trips)});\n  }\n\n  handleDataChange(dataSampleOption: ValueType<any>) {    \n    if (dataSampleOption != null && this.state.dataSampleIdx !== dataSampleOption.value) {\n      this.handleHighlightOutgoingTripsChange([]);\n      this.handleHighlightIncomingTripsChange([]);\n      let dataSampleIdx = dataSampleOption.value as number;\n      window.history.pushState({}, '', '')\n      this.setState({trips: null, dataSampleIdx: dataSampleIdx});\n      this.loadTrips(dataSampleIdx);\n      this.loadNodeList(dataSampleIdx);\n      this.loadGeoJsonNodes(dataSampleIdx);\n      this.handleViewportChange(this.state.appConfig.dataSamples[dataSampleIdx].initialPartialViewport);\n      this.knownUrlParams.dataSampleIdx = dataSampleIdx;\n      Utils.updateUrlParameters(this.knownUrlParams);\n    }\n  }\n\n  handleOnHoverGeoPoint(info: any) {\n    this.setState({popupInfo: info !== null ? info.object : null});\n  }\n\n  resize() {\n    this.handleViewportChange({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n  }\n\n  handleViewportChange(viewport: any) {\n    this.setState({\n      viewport: Object.assign({}, this.state.viewport, viewport)\n    });\n  }\n\n  handleInfoBoxVisibility(hideInfoBox: boolean) {\n    this.setState({\n      hideInfoBox: hideInfoBox\n    });\n  }\n\n  render() {\n    const {appConfig, dataSampleIdx, friendlyName, friendlyTime, hideInfoBox, highlightedOutgoingTrips,highlightedIncomingTrips, loopLength, loopTimeMinutes, nodeList, nodes, percentThroughLoop, popupInfo, trailLength, trips, viewport} = this.state;\n\n    const dataSampleOptions: any[] = this.state.appConfig.dataSamples.map((n: DataSampleUrls, idx: number) => { return { \"value\": idx, \"label\": n.title} });\n    const nodeListOptions: any[] = nodeList.map(n => { return { \"value\": n, \"label\": n} });\n    const highlightedOutgoingTripsVl: any[] = highlightedOutgoingTrips.map(n => { return { \"value\": n, \"label\": n} });\n    const highlightedIncomingTripsVl: any[] = highlightedIncomingTrips.map(n => { return { \"value\": n, \"label\": n} });\n\n    let loader = <span></span>;\n    if (trips == null) {\n      loader = <Loader />;\n    }\n\n    let popupEle = null;\n    if (popupInfo != null) {\n      popupEle =\n        <Popup id=\"popup\" longitude={popupInfo.geometry.coordinates[0]} latitude={popupInfo.geometry.coordinates[1]} closeButton={false} closeOnClick={false} anchor=\"bottom-left\">\n          <div className=\"popup-inner\">{this.state.appConfig.nodeNameLabel} {popupInfo.properties != null ? popupInfo.properties.name : ''}\n            <br/>\n            {this.state.appConfig.nodeIdLabel} {popupInfo.properties != null ? popupInfo.properties.stopid : ''}\n            <br/>\n            {this.state.appConfig.nodeCount} {popupInfo.properties != null ? popupInfo.properties.count : ''}\n          </div>\n        </Popup>;\n    }\n\n    let selectDataEle = null;\n    if (this.state.appConfig.dataSamples.length > 1) {\n      selectDataEle = <div><h6>Select Data</h6><div><Select options={dataSampleOptions} onChange={this.handleDataChange} value={dataSampleOptions[dataSampleIdx]} /></div></div>;\n    }\n\n    return (\n      <div id=\"container\">\n        {loader}\n        <div id=\"divdeckgl\">\n          <ReactMapGL \n            {...viewport}\n            mapStyle={this.state.appConfig.mapboxStyle != null ? this.state.appConfig.mapboxStyle : 'mapbox://styles/liquidsun86/ck5faex8m22n61imiy9hbo1h7'}\n            dragRotate={true}\n            onViewportChange={this.handleViewportChange.bind(this)}\n            mapboxApiAccessToken={this.state.appConfig.mapboxToken!= null ? this.state.appConfig.mapboxToken : 'pk.eyJ1IjoibGlxdWlkc3VuODYiLCJhIjoiY2syeDkwb2RzMDlnbTNncGQ3amU1aGR2OSJ9.YU3MLFHx8BoYbrF0Xl9Lag'}>\n            <DeckGLOverlay \n              color={appConfig.color}\n              handleOnHover={this.handleOnHoverGeoPoint}\n              highlightColor={appConfig.highlightColor}\n              incomingHighlightColor = {appConfig.incomingHighlightColor}\n              highlightedOutgoingTrips={highlightedOutgoingTrips}\n              highlightedIncomingTrips={highlightedIncomingTrips}\n              initialViewState={appConfig.initialViewport}\n              loopLength={loopLength}\n              loopTimeMilliseconds={this.getAnimationTime()}\n              nodes={nodes!}\n              timestampOffset={this.timestampOffset}\n              trips={trips}\n              trailLength={trailLength}\n              viewport={viewport}\n              />\n            {popupEle}\n          </ReactMapGL>\n        </div>\n        <div id=\"divcredits\">\n          <div>\n            <h6>Credits:</h6>\n          </div>\n          <div>\n            <h6>Data:<a href= \"https://www.bluebikes.com/system-data\" target=\"_blank\"> Boston Blue Bikes</a></h6>\n          </div>\n          <div>\n            <h6>Application:<a href= \"https://github.com/stevekirks/deckgl-trips\" target=\"_blank\"> github.com/stevekirks</a></h6>\n          </div>\n          <div>\n            <h6>Data processing and app adjusting: Ivan Vasilyev</h6>\n          </div>\n        </div>\n        <div id=\"top-left-container\">\n          <div id=\"title-box\"><h1>A day of the Blue Bikes</h1></div>\n          <div id=\"divinfo\" className={hideInfoBox ? \"hide\" : \"\"}>\n            <button id=\"btnHideInfoBox\" className=\"btn-transparent right-align\" onClick={() => this.handleInfoBoxVisibility(true)}>X</button>\n            {selectDataEle}\n            <h3>{friendlyTime}</h3>\n            <div>\n              <h6>Adjust point in time:</h6>\n              <input className=\"full-width\" type=\"range\" min=\"0\" max=\"100\" value={String(percentThroughLoop)} onChange={this.handleTimeChange} />\n            </div>\n            <div>\n              <h6>Adjust animation speed:</h6>\n              <div className=\"block\">\n                <input className=\"\" type=\"number\" defaultValue={String(loopTimeMinutes)} onInput={this.handleLoopTimeMinutesChange} /><label>mins/sec</label>\n              </div>\n            </div>\n            <div>\n              <h6>Adjust trail length:</h6>\n              <div className=\"block\">\n                <input type=\"number\" defaultValue={String(trailLength)} onInput={this.handleTrailLengthChange} /><label>x</label>\n              </div>\n            </div>\n            <div>\n              <h6>Highlight {this.state.appConfig.nodeLabelOutgoing}</h6>\n              <div>\n                <Select\n                  closeMenuOnSelect={true}\n                  isMulti\n                  options={nodeListOptions}\n                  onChange={this.handleHighlightOutgoingTripsChange}\n                  onMenuClose={this.handleHighlightNodeReload}\n                  //placeholder={\"Highlight \" + this.state.appConfig.nodeLabelOutgoing}\n                  value={highlightedOutgoingTripsVl}\n                  maxMenuHeight={100}\n                />\n              </div>\n            </div>\n            <div>\n              <h6>Highlight {this.state.appConfig.nodeLabelIncoming}</h6>\n              <div>\n                <Select\n                    closeMenuOnSelect={true}\n                    isMulti\n                    options={nodeListOptions}\n                    onChange={this.handleHighlightIncomingTripsChange}\n                    onMenuClose={this.handleHighlightNodeReload}\n                    //placeholder={\"Highlight \" + this.state.appConfig.nodeLabelOutgoing}\n                    value={highlightedIncomingTripsVl}\n                    maxMenuHeight={100}\n                />\n              </div>\n            </div>\n          </div>\n          <button id=\"btnShowInfoBox\" className={\"btn-transparent \" + (hideInfoBox ? \"\" : \"hide\")} onClick={() => this.handleInfoBoxVisibility(false)}>SHOW INFO BOX</button>\n        </div>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}